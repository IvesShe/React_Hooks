{"version":3,"sources":["components/Hooks/index.jsx","App.jsx","index.js"],"names":["Hooks","state","count","myRef","React","createRef","add","setState","unmount","ReactDom","unmountComponentAtNode","document","getElementById","show","alert","current","value","this","timer","setInterval","clearInterval","onClick","type","ref","Component","App","x","ReactDOM","render","StrictMode"],"mappings":"+LAkIeA,E,4MA5HXC,MAAQ,CAACC,MAAM,G,EAEfC,MAAQC,IAAMC,Y,EAEdC,IAAM,WAUF,EAAKC,UAAS,SAAAN,GAAK,MAAK,CAACC,MAAMD,EAAMC,MAAM,O,EAU/CM,QAAU,WACNC,IAASC,uBAAuBC,SAASC,eAAe,U,EAG5DC,KAAO,WACHC,MAAM,EAAKX,MAAMY,QAAQC,Q,uDAG7B,WAAoB,IAAD,OACfC,KAAKC,MAAQC,aAAY,WACrB,EAAKZ,UAAS,SAAAN,GAAK,MAAK,CAACC,MAAMD,EAAMC,MAAM,QAC7C,O,kCAGN,WACIkB,cAAcH,KAAKC,S,oBAGvB,WACI,OACI,gCAEI,iEAAWD,KAAKhB,MAAMC,MAAtB,OACA,wBAAQmB,QAASJ,KAAKX,IAAtB,4BACA,wBAAQe,QAASJ,KAAKT,QAAtB,sCACA,uBACA,uBAAOc,KAAK,OAAOC,IAAKN,KAAKd,QAC7B,wBAAQkB,QAASJ,KAAKJ,KAAtB,yD,GArDIT,IAAMoB,WCDLC,E,4JACnB,WACE,OACE,cAAC,WAAD,UACE,cAAC,EAAD,CAAOC,EAAG,Y,GAJeF,aCCjCG,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFlB,SAASC,eAAe,W","file":"static/js/main.ee825142.chunk.js","sourcesContent":["import React from 'react'\r\nimport ReactDom from 'react-dom'\r\n\r\n// 類式組件\r\nclass Hooks extends React.Component {\r\n\r\n    state = {count:0};\r\n\r\n    myRef = React.createRef();\r\n\r\n    add = ()=>{\r\n        // setState第一種寫法(對象式的)\r\n        //const {count} = this.state\r\n        //this.setState({count:count+1});\r\n        // this.setState({count:count+1},()=>{\r\n        //     console.log(this.state.count);\r\n        // });\r\n        //this.setState({count:this.state.count+1});\r\n\r\n        // setState第二種寫法\r\n        this.setState(state => ({count:state.count+1}));\r\n        // this.setState((state,props) => {\r\n        //     console.log(state,props);\r\n        //     return {count:state.count+1}\r\n        // });\r\n        // this.setState(state => ({count:state.count+1}),()=>{\r\n        //     console.log(this.state.count);\r\n        // });\r\n    }\r\n\r\n    unmount = ()=>{\r\n        ReactDom.unmountComponentAtNode(document.getElementById('root'));\r\n    }\r\n\r\n    show = ()=>{\r\n        alert(this.myRef.current.value);\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.timer = setInterval(()=>{\r\n            this.setState(state => ({count:state.count+1}));\r\n        },1000);\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        clearInterval(this.timer);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                \r\n                <h2>當前求和為 {this.state.count} </h2>\r\n                <button onClick={this.add} >點我+1</button>\r\n                <button onClick={this.unmount} >卸載組件</button>\r\n                <hr/>\r\n                <input type=\"text\" ref={this.myRef} />\r\n                <button onClick={this.show} >點擊提示數據</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n// 函數式組件\r\n// function Hooks() {\r\n//     console.log('@Hooks');\r\n\r\n//     // useState傳入的初始值，React底層處理過了，只有在第一次會被調用 \r\n//     const [count,setCount] = React.useState(0);\r\n//     const [name,setName] = React.useState('Tom');\r\n//     const myRef = React.useRef();\r\n//     //console.log(count,setCount);\r\n\r\n//     // 加的回調\r\n//     function add(){\r\n//         // 第一種寫法\r\n//         // setCount(count+1);\r\n\r\n//         // 第二種寫法\r\n//         setCount(count => count+1);\r\n//     }\r\n\r\n//     // 卸載組件的回調\r\n//     function unmount(){\r\n//         ReactDom.unmountComponentAtNode(document.getElementById('root'));\r\n//     }\r\n\r\n//     // 提示輸入的回調\r\n//     function show(){\r\n//         alert(myRef.current.value);\r\n//     }\r\n\r\n//     function changeName(){\r\n//         // 第一種寫法\r\n//         setName('Jack');\r\n\r\n//         // 第二種寫法\r\n//         //setCount(count => count+1);\r\n//     }\r\n\r\n//     // 第二個參數傳入[]，使useEffect相當於componentDidMount()\r\n//     // 第二個參數有監測傳入參數的意思，不填的話全部都監測，則每次更新都會監測到\r\n//     // 寫[]代表誰也不監測\r\n//     React.useEffect(()=>{\r\n//         //console.log('@');\r\n//         let timer = setInterval(()=>{\r\n//             setCount(count=>count+1);\r\n//         },1000);\r\n\r\n//         // React.useEffect返回的函數相當於ReactDom.unmountComponentAtNode\r\n//         return ()=>{\r\n//             clearInterval(timer);\r\n//         }\r\n//     },[])\r\n//     // },[count,name])\r\n\r\n//     return (\r\n//         <div>\r\n//             <h2>當前求和為 {count} </h2>\r\n//             <h2>我的名字是 {name} </h2>\r\n//             <button onClick={add} >點我+1</button>\r\n//             <button onClick={changeName} >點我改名</button>\r\n//             <button onClick={unmount} >卸載組件</button>\r\n//             <hr/>\r\n//             <input type=\"text\" ref={myRef} />\r\n//             <button onClick={show} >點擊提示數據</button>\r\n//         </div>\r\n//     )\r\n// }\r\n\r\nexport default Hooks\r\n","import React, { Component,Fragment } from 'react'\nimport Hooks from './components/Hooks'\n\nexport default class App extends Component {\n  render() {\n    return (\n      <Fragment>\n        <Hooks x={101} />\n      </Fragment>\n    );\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}